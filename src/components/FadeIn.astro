---
interface Props {
  class?: string;
  delay?: number;
  distance?: number;
}

const { class: className, delay = 0, distance = 40 } = Astro.props;
---

<div class:list={["fade-in", className]} style={`--delay: ${delay}ms; --distance: ${distance}px;`}>
  <slot />
</div>

<style>
  .fade-in {
    opacity: 0;
    transform: translateY(var(--distance));
    transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1), 
                transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    transition-delay: var(--delay);
  }

  .fade-in.visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  let observer: IntersectionObserver;

  function initializeObserver() {
    const observerOptions = {
      root: null,
      rootMargin: '-50px',
      threshold: 0.2
    };

    observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    document.querySelectorAll('.fade-in').forEach((element) => {
      observer.observe(element);
    });
  }

  // Initialize on first load
  initializeObserver();

  // Re-initialize after navigation
  document.addEventListener('astro:page-load', () => {
    initializeObserver();
  });
</script> 