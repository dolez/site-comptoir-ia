---
interface Props {
  class?: string;
  delay?: number;
  direction?: 'left' | 'right';
}

const { class: className, delay = 0, direction = 'left' } = Astro.props;
---

<div class:list={["slide-in", className]} style={`--delay: ${delay}ms; --direction: ${direction === 'left' ? '-100%' : '100%'};`}>
  <slot />
</div>

<style>
  .slide-in {
    opacity: 0;
    transform: translateX(var(--direction));
    transition: opacity 0.5s ease-in-out, 
                transform 0.5s ease-in-out;
    transition-delay: var(--delay);
  }

  .slide-in.visible {
    opacity: 1;
    transform: translateX(0);
  }
</style>

<script>
  const observerOptions = {
    root: null,
    rootMargin: '-50px',
    threshold: 0.2
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  document.querySelectorAll('.slide-in').forEach((element) => {
    observer.observe(element);
  });
</script> 