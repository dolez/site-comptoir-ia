---
interface Props {
  class?: string;
  delay?: number;
  direction?: 'left' | 'right';
}

const { class: className, delay = 0, direction = 'left' } = Astro.props;
---

<div class:list={["slide-in", className]} style={`--delay: ${delay}ms; --direction: ${direction === 'left' ? '-50px' : '50px'};`}>
  <slot />
</div>

<style>
  .slide-in {
    opacity: 0;
    transform: translateX(var(--direction));
    transition: opacity 0.5s ease-in-out, 
                transform 0.5s ease-in-out;
    transition-delay: var(--delay);
  }

  .slide-in.visible {
    opacity: 1;
    transform: translateX(0);
  }
</style>

<script>
  let observer: IntersectionObserver;

  function initializeObserver() {
    const observerOptions = {
      root: null,
      rootMargin: '-50px',
      threshold: 0.2
    };

    observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    document.querySelectorAll('.slide-in').forEach((element) => {
      observer.observe(element);
    });
  }

  // Initialize on first load
  initializeObserver();

  // Re-initialize after navigation
  document.addEventListener('astro:page-load', () => {
    initializeObserver();
  });
</script> 