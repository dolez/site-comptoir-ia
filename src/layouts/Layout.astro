---
import '../styles/global.css';
import { ClientRouter } from "astro:transitions";
export interface Props {
  title: string;
  description?: string;
}

const { 
  title, 
  description = "Le Comptoir de l'IA - Solutions d'IA pour entreprises fran√ßaises"
} = Astro.props;
---

<!doctype html>
<html lang="en"  transition:name="root" transition:animate="none">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=League+Spartan:wght@400;500;600;700&family=Lexend:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/orestbida/cookieconsent@3.0.1/dist/cookieconsent.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/0.158.0/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.globe.min.js"></script>
    <!-- Google tag (gtag.js) -->
    <script is:inline src="https://www.googletagmanager.com/gtag/js?id=G-ZZ49BFDJQJ"></script>
    <script>
      // We need a global definition to avoid type warnings
      declare global {
        interface Window {
          dataLayer: Record<string, any>[];
          gtag: (...args: any[]) => void;
        }
      }
      document.addEventListener('astro:page-load', () => {
        // Initialize dataLayer
        window.dataLayer = window.dataLayer || [];
    
        // Define gtag function
        window.gtag = function gtag(...args: any[]) {
          window.dataLayer.push(arguments);
        };
    
        // Load GA4 with denied default consents
        window.gtag('js', new Date());
        window.gtag('consent', 'default', {
          ad_storage: 'denied',
          ad_user_data: 'denied',
          ad_personalization: 'denied',
          analytics_storage: 'denied',
        });
        window.gtag('config', 'G-ZZ49BFDJQJ');

        // Track page view on navigation
        const currentPath = window.location.pathname;
        window.gtag('event', 'page_view', {
          page_path: currentPath,
          page_title: document.title
        });
      });
    </script>
  
    <ClientRouter />
  </head>
  <body class="antialiased bg-white dark:bg-secondary-950 text-secondary-900 dark:text-secondary-100 transition-colors duration-300">
    <div id="page-wrapper" class="page-transition-wrapper">
      <slot />
    </div>
    <div transition:persist="find-me-on-the-other-side" id="cc-container">
      <script is:inline>
        // Theme management
        const getTheme = () => {
          const localStorageTheme = localStorage?.getItem("theme") ?? '';
          if (['dark', 'light'].includes(localStorageTheme)) {
            return localStorageTheme;
          }
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
          }
          return 'light';
        };

        const applyTheme = (element) => {
          const theme = getTheme();
          if (theme === 'light') {
            element.classList.remove('dark');
          } else {
            element.classList.add('dark');
          }
        };

        // Listen for system theme changes
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
          // Only keep dark theme if user explicitly chose it while system was light
          const savedTheme = localStorage?.getItem("theme");
          if (savedTheme === 'dark' && !e.matches) {
            // Keep dark theme if user explicitly chose it while system was light
            document.documentElement.classList.add('dark');
          } else {
            // In all other cases, follow system preference
            localStorage.removeItem("theme");
            if (e.matches) {
              document.documentElement.classList.add('dark');
            } else {
              document.documentElement.classList.remove('dark');
            }
          }
        });

        // Apply theme before page preparation
        document.addEventListener('astro:before-preparation', (event) => {
          // Restore the `show--consent` class if it was present before the page swap
          const htmlClassName = window.document.documentElement.className;
          const consentClassPresent = htmlClassName.includes('show--consent') ? true : false;
          window._showConsentClass = consentClassPresent;
        });

        document.addEventListener('astro:before-swap', (event) => {
          // Apply theme to the new document
          applyTheme(event.newDocument.documentElement);
          
          // Restore consent class
          const showConsent = window._showConsentClass ? ` show--consent` : '';
          event.newDocument.documentElement.className += showConsent;
        });

        // Handle theme toggle
        const handleThemeToggle = () => {
          const element = document.documentElement;
          const isSystemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          
          element.classList.toggle("dark");
          const isDark = element.classList.contains("dark");

          // Only save preference if user chose dark while system is light
          if (isDark && !isSystemDark) {
            localStorage.setItem("theme", "dark");
          } else {
            localStorage.removeItem("theme");
          }
        }

        // Add event listener on initial load and after each page transition
        document.addEventListener('astro:page-load', () => {
          const themeToggle = document.getElementById("themeToggle");
          themeToggle?.addEventListener("click", handleThemeToggle);
        });

        // Initial theme application
        applyTheme(document.documentElement);
        // Only save initial theme if it's dark while system is light
        const isSystemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        if (!isSystemDark && getTheme() === 'dark') {
          localStorage.setItem('theme', 'dark');
        }
      </script>
    </div>
  </body>
</html>
